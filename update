#!/bin/bash

# Constants
SERVER_URL="http://localhost:3000"
LINE="-----------------------------------------------------------------------"
GREEN="\e[32m"
RED="\e[31m"
END="\e[0m"

# State
query="${SERVER_URL}/api/data?"
first_param=true
abilities=false
pokemon=false
pokemon_start=1
pokemon_end=20
clear=false

# Check if server is running
status="$(curl -LIs "$SERVER_URL" | head -1)"
validate=( $status )
if curl --output /dev/null --silent --head --fail "$SERVER_URL";
then
    # Allow selection of update fields
    input="#"
    while [ "$input" != "" ]
    do
        # Clear screen on each loop
        tput reset

        # Show list of toggled params
        if [ "$abilities" = true ]
        then
            printf "${GREEN}%s\t%s${END}\n" "(1) Modify Abilities" "[✓]"
        else
            printf "${RED}%s\t%s${END}\n" "(1) Modify Abilities" "[ ]"
        fi

        if [ "$pokemon" = true ]
        then
            printf "${GREEN}%s\t%s${END}\n" "(2) Modify Pokemon" "[✓]"
        else
            printf "${RED}%s\t%s${END}\n" "(2) Modify Pokemon" "[ ]"
        fi

        if [ "$clear" = true ]
        then
            printf "${GREEN}%s\t%s${END}\n\n" "(X) Clear collections" "[✓]"
        else
            printf "${RED}%s\t%s${END}\n\n" "(X) Clear collections" "[ ]"
        fi

        # Prompt for user input
        read -p "Pick a field # to toggle or leave empty to run the update: " input

        # Toggle any selections
        if [ "$input" = "1" ]
        then
            if [ "$abilities" = true ]
            then
                abilities=false
            else
                abilities=true
            fi
        fi

        if [ "$input" = "2" ]
        then
            if [ "$pokemon" = true ]
            then
                pokemon=false
            else
                pokemon=true

                # Get inputs for start/end
                read -p "Start with dex #: " pokemon_start
                read -p "End with dex #: " pokemon_end
            fi
        fi

        if [ "$input" = "X" ] || [ "$input" = "x" ]
        then
            if [ "$clear" = true ]
            then
                clear=false
            else
                clear=true
            fi
        fi
    done

    # Construct query
    if [ "$abilities" = true ]
    then
        query+="abilities=true"
        first_param=false
    fi
    
    if [ "$pokemon" = true ]
    then
    if [ "$first_param" = false ]
        then
            query+="&"
        fi
        query+="pokemon=true&start=${pokemon_start}&end=${pokemon_end}"
        first_param=false
    fi

    if [ "$clear" = true ]
    then
        if [ "$first_param" = false ]
        then
            query+="&"
        fi
        query+="clear=true"
        first_param=false
    fi

    # Status message to show while updating
    printf "\n%s\n\n" "$LINE"
    printf "%s\n\n" "Running update..."

    # Run update and begin timing
    printf "%s\n\n" "$LINE"
    start=$SECONDS
    curl "$query" | json_pp

    if [ $? -eq 0 ]
    then
        # Update succeeded, get metrics
        duration=$(( SECONDS - start ))
        printf "\n\n${GREEN}%s${END}\n\n" "Update took ${duration} seconds to complete"
    else
        # Update failed
        printf "\n${RED}%s${END}\n\n" "Update failed"
    fi
else
    printf "\n${RED}%s${END}\n\n" "The server is unreachable"
fi
