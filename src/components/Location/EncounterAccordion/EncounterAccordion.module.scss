@use "@/styles/constants";

.encounter-accordion {
    --accordion-x-padding: 2rem;
    --accordion-y-padding: 1.5rem;
    --arrow-size: 12px;
    --arrow-transition-time: 0.2s;
    --body-border-size: 1px;
    --body-extra-padding: 2rem;
    --cell-font-size: 1rem;
    --cell-x-padding: 1rem;
    --cell-y-padding: 1rem;
    --category-font-size: 1rem;
    --category-y-padding: 1.5rem;
    --loading-y-padding: 2rem;
    --method-font-size: 1.25rem;
    --name-font-size: 1rem;
    --name-spacing: 0.5rem;
    --sprite-size: 90px;
    --type-height: 12px;
    --type-ratio: 8/3;
    --types-inner-spacing: 4px;

    max-height: calc(var(--method-font-size) + 2 * var(--accordion-y-padding));
    overflow-y: hidden;
    width: 100%;

    .header {
        align-items: center;
        background: constants.$accent-color;
        display: flex;
        justify-content: space-between;
        padding: var(--accordion-y-padding) var(--accordion-x-padding);
        width: 100%;

        .method {
            font-size: var(--method-font-size);
            line-height: var(--method-font-size);
        }

        .arrow {
            filter: constants.$svg-color;
            height: var(--arrow-size);
            position: relative;
            transition: transform var(--arrow-transition-time);
            width: var(--arrow-size);
        }

        .reversed {
            transform: rotate(180deg);
        }
    }

    .body {
        border-top: var(--body-border-size) solid constants.$text-color;
        width: 100%;

        .row {
            background: constants.$accent-color;

            .category {
                font-size: var(--category-font-size);
                line-height: var(--category-font-size);
                padding: var(--category-y-padding) var(--cell-x-padding);
            }

            .cell {
                font-size: var(--cell-font-size);
                line-height: var(--cell-font-size);
                padding: var(--cell-y-padding) var(--cell-x-padding);
                text-align: center;

                .pokemon {
                    align-items: center;
                    display: flex;
                    flex-direction: column;

                    .sprite {
                        height: var(--sprite-size);
                        position: relative;
                        width: var(--sprite-size);
                    }

                    .name {
                        font-size: var(--name-font-size);
                        line-height: var(--name-font-size);
                        margin-bottom: var(--name-spacing);
                    }

                    .types {
                        display: flex;
                        gap: var(--types-inner-spacing);

                        .type {
                            height: var(--type-height);
                            position: relative;
                            width: calc(var(--type-height) * var(--type-ratio));
                        }
                    }
                }
            }

            &:last-child > .cell {
                padding-bottom: var(--body-extra-padding);
            }
        }
    }

    .loading {
        background-color: constants.$accent-color;
        padding: var(--loading-y-padding) 0;
    }
}

.open {
    max-height: fit-content;
}

@media screen and (min-width: constants.$tablet) {
    .encounter-accordion {
        --category-font-size: 1.25rem;
        --cell-font-size: 1.25rem;
        --cell-x-padding: 3rem;
        --method-font-size: 1.5rem;
        --name-font-size: 1.25rem;
        --sprite-size: 100px;
    }
}

@media (hover: hover) {
    .encounter-accordion {
        .header:hover > .arrow {
            filter: constants.$svg-hover-color;
        }

        .body .row > .cell > .pokemon > .name:hover {
            color: constants.$hover-color;
        }
    }
}
